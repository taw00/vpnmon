#!/usr/bin/env python

################################################################
#
# vpnmon - A VPN connection monitor for Ubuntu
#
# Whenever your VPN connection disconnects, vpnmon disables your 
# entire networking or runs a custom command of your choice.
# This tool requires Network Manager to be installed or else it
# would fail to function.
#
# Licensed under GNU General Public License version 2
#
################################################################

import sys
import traceback

import gobject
gobject.threads_init()

from dbus import glib
glib.init_threads()

import dbus
import dbus.decorators
import dbus.mainloop.glib

import os
import argparse
import pynotify

class CatchallSignalHandler(object):
    """A functor that eliminates the need to access globals. Needed
    since dbus won't allow us to pass our own parameters."""
    
    def __init__(self, command):
        self.command = command
        
    def __call__(self, *args, **kwargs):
        # VPN disconnect (6) or failure (7)
        if args[0] >= 6: 
            print 'VPN disconnected.'
            if self.command is not None:
                run_command(self.command)
            else:
                disable_net()  

class ShowNotification(object):
    """A functor that eliminates the need to access globals."""
    
    def __init__(self, pynotify_avail):
        self.pynotify_avail = pynotify_avail
            
    def __call__(self, message, icon):
        print message
        if self.pynotify_avail:
            pynotify.Notification ("vpnmon", message, icon).show()

def get_argparser():
    parser = argparse.ArgumentParser(description='vpnmon - A VPN \
                                     connection monitor for Linux')
    parser.add_argument('-r', '--run-command', metavar='COMMAND', type=str,
                        help='run COMMAND when VPN connection drops,\
                        instead of disabling the network')
    return parser

def disable_net():
    show_notification('Disabling networking...', 'dialog-warning')
    os.system('nmcli -p n off')

def run_command(command):
    msg = 'Running command:\n' + \
          '\"' + command + "\""
    show_notification(msg, 'dialog-warning')
    os.system(command)

def main():
    # Take care of bad parameters and obtaining the command at once.
    # If any errors occur in the args the program will terminate here.
    command = get_argparser().parse_args().run_command    

    try:
        # Workaround missing connections in nm-applet.
        # Part 1
        os.system('nmcli -p n off')

        # Get the catchall_signal_handler functor.
        catchall_signal_handler = CatchallSignalHandler(command)
        
        dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
        bus = dbus.SystemBus()
        bus.add_signal_receiver(catchall_signal_handler,
                                signal_name='VpnStateChanged',
                                interface_keyword='dbus_interface',
                                member_keyword='member')
        loop = gobject.MainLoop()

        # Workaround missing connections in nm-applet.
        # Part 2
        os.system('nmcli -p n on')

        show_notification('Monitoring your VPN connection...', 'dialog-information')
        loop.run()
    except KeyboardInterrupt:
        print '\nExiting...'
    except:
        # If anything above throws, whether during init
        # or during runing the main loop, we want to make
        # sure we don't leave the user without monitoring
        # but with working connection, so we let them know
        # we crashed and disable the networking.
        show_notification('Unexpected error occurred.', 'dialog-error')
        disable_net()
        
if __name__ == '__main__':
    # Attempt to init pynotify. Not sure why this could fail.
    # Documentation is quite scarce on this module, but all
    # examples quite if it returns false. Instead we do not
    # show notifications.
    pynotify_avail = pynotify.init ("vpnmon")
    if not pynotify_avail:
        print 'Notification support not available.'

    # Get the show_notification functor.
    show_notification = ShowNotification(pynotify_avail)

    # Run the main program.
    main()
